// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: address.proto

#include "address.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr Address::Address(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : city_(nullptr)
  , street_(nullptr)
  , building_(nullptr){}
struct AddressDefaultTypeInternal {
  constexpr AddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressDefaultTypeInternal() {}
  union {
    Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressDefaultTypeInternal _Address_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_address_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_address_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_address_2eproto = nullptr;

const uint32_t TableStruct_address_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Address, city_),
  PROTOBUF_FIELD_OFFSET(::Address, street_),
  PROTOBUF_FIELD_OFFSET(::Address, building_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Address)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Address_default_instance_),
};

const char descriptor_table_protodef_address_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\raddress.proto\032\ncity.proto\032\014street.prot"
  "o\032\016building.proto\"T\n\007Address\022\023\n\004city\030\001 \001"
  "(\0132\005.City\022\027\n\006street\030\002 \001(\0132\007.Street\022\033\n\010bu"
  "ilding\030\003 \001(\0132\t.Buildingb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_address_2eproto_deps[3] = {
  &::descriptor_table_building_2eproto,
  &::descriptor_table_city_2eproto,
  &::descriptor_table_street_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_address_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_address_2eproto = {
  false, false, 151, descriptor_table_protodef_address_2eproto, "address.proto", 
  &descriptor_table_address_2eproto_once, descriptor_table_address_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_address_2eproto::offsets,
  file_level_metadata_address_2eproto, file_level_enum_descriptors_address_2eproto, file_level_service_descriptors_address_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_address_2eproto_getter() {
  return &descriptor_table_address_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_address_2eproto(&descriptor_table_address_2eproto);

// ===================================================================

class Address::_Internal {
 public:
  static const ::City& city(const Address* msg);
  static const ::Street& street(const Address* msg);
  static const ::Building& building(const Address* msg);
};

const ::City&
Address::_Internal::city(const Address* msg) {
  return *msg->city_;
}
const ::Street&
Address::_Internal::street(const Address* msg) {
  return *msg->street_;
}
const ::Building&
Address::_Internal::building(const Address* msg) {
  return *msg->building_;
}
void Address::clear_city() {
  if (GetArenaForAllocation() == nullptr && city_ != nullptr) {
    delete city_;
  }
  city_ = nullptr;
}
void Address::clear_street() {
  if (GetArenaForAllocation() == nullptr && street_ != nullptr) {
    delete street_;
  }
  street_ = nullptr;
}
void Address::clear_building() {
  if (GetArenaForAllocation() == nullptr && building_ != nullptr) {
    delete building_;
  }
  building_ = nullptr;
}
Address::Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_city()) {
    city_ = new ::City(*from.city_);
  } else {
    city_ = nullptr;
  }
  if (from._internal_has_street()) {
    street_ = new ::Street(*from.street_);
  } else {
    street_ = nullptr;
  }
  if (from._internal_has_building()) {
    building_ = new ::Building(*from.building_);
  } else {
    building_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Address)
}

inline void Address::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&city_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&building_) -
    reinterpret_cast<char*>(&city_)) + sizeof(building_));
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:Address)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete city_;
  if (this != internal_default_instance()) delete street_;
  if (this != internal_default_instance()) delete building_;
}

void Address::ArenaDtor(void* object) {
  Address* _this = reinterpret_cast< Address* >(object);
  (void)_this;
}
void Address::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:Address)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && city_ != nullptr) {
    delete city_;
  }
  city_ = nullptr;
  if (GetArenaForAllocation() == nullptr && street_ != nullptr) {
    delete street_;
  }
  street_ = nullptr;
  if (GetArenaForAllocation() == nullptr && building_ != nullptr) {
    delete building_;
  }
  building_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .City city = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_city(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Street street = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_street(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Building building = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_building(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Address::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Address)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .City city = 1;
  if (this->_internal_has_city()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::city(this), target, stream);
  }

  // .Street street = 2;
  if (this->_internal_has_street()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::street(this), target, stream);
  }

  // .Building building = 3;
  if (this->_internal_has_building()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::building(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Address)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .City city = 1;
  if (this->_internal_has_city()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *city_);
  }

  // .Street street = 2;
  if (this->_internal_has_street()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *street_);
  }

  // .Building building = 3;
  if (this->_internal_has_building()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *building_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address::GetClassData() const { return &_class_data_; }

void Address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Address *>(to)->MergeFrom(
      static_cast<const Address &>(from));
}


void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Address)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_city()) {
    _internal_mutable_city()->::City::MergeFrom(from._internal_city());
  }
  if (from._internal_has_street()) {
    _internal_mutable_street()->::Street::MergeFrom(from._internal_street());
  }
  if (from._internal_has_building()) {
    _internal_mutable_building()->::Building::MergeFrom(from._internal_building());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Address, building_)
      + sizeof(Address::building_)
      - PROTOBUF_FIELD_OFFSET(Address, city_)>(
          reinterpret_cast<char*>(&city_),
          reinterpret_cast<char*>(&other->city_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_address_2eproto_getter, &descriptor_table_address_2eproto_once,
      file_level_metadata_address_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Address* Arena::CreateMaybeMessage< ::Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Address >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
